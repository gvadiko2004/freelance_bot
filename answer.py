import asyncio
import re
import requests
import os
import sys
from bs4 import BeautifulSoup
from telethon import TelegramClient, events, Button

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
api_id = 21882740
api_hash = "c80a68894509d01a93f5acfeabfdd922"
PHONE_NUMBER = "+380634646075"

BOT_TOKEN = "6566504110:AAFK9hA4jxZ0eA7KZGhVvPe8mL2HZj2tQmE"
ALERT_CHAT_ID = 1168962519

SOURCE_CHAT = "FreelancehuntProjects"

KEYWORDS = [
    "#html_–∏_css_–≤–µ—Ä—Å—Ç–∫–∞",
    "#–≤–µ–±_–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "#cms",
    "#–∏–Ω—Ç–µ—Ä–Ω–µ—Ç_–º–∞–≥–∞–∑–∏–Ω—ã_–∏_—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è_–∫–æ–º–º–µ—Ä—Ü–∏—è",
    "#—Å–æ–∑–¥–∞–Ω–∏–µ_—Å–∞–π—Ç–∞_–ø–æ–¥_–∫–ª—é—á",
    "#–¥–∏–∑–∞–π–Ω_—Å–∞–π—Ç–æ–≤"
]
KEYWORDS = [k.lower() for k in KEYWORDS]

SESSION_FILE = "user_session.session"
RESTART_INTERVAL = 20 * 60  # 20 –º–∏–Ω—É—Ç

# ===== –ö–ª–∏–µ–Ω—Ç =====
user_client = TelegramClient(SESSION_FILE, api_id, api_hash)

# ===== –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–æ—Ç–∞ =====
def send_to_bot(text):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {"chat_id": ALERT_CHAT_ID, "text": text, "disable_web_page_preview": False}
    try:
        requests.post(url, data=data)
    except Exception as e:
        print(f"[ERROR BOT SEND] {e}")

# ===== –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ =====
def extract_links(text):
    return re.findall(r'https?://[^\s]+', text or "")

# ===== Title —Å—Ç—Ä–∞–Ω–∏—Ü—ã =====
def get_page_title(url):
    try:
        response = requests.get(url, timeout=5)
        soup = BeautifulSoup(response.text, "html.parser")
        title = soup.title.string.strip() if soup.title else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
        return title
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ title: {e}]"

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è =====
async def check_and_forward(message):
    text = message.text or ""
    lower_text = text.lower()

    if any(k in lower_text for k in KEYWORDS):
        send_to_bot(f"üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{text}")

        for link in extract_links(text):
            send_to_bot(f"üîó –°—Å—ã–ª–∫–∞:\n{link}")
            send_to_bot(f"üìù Title:\n{get_page_title(link)}")

        if message.buttons:
            for row in message.buttons:
                for button in row:
                    if isinstance(button, Button) and getattr(button, "url", None):
                        send_to_bot(f"üîò –ö–Ω–æ–ø–∫–∞:\n{button.url}")
                        send_to_bot(f"üìù Title:\n{get_page_title(button.url)}")

@user_client.on(events.NewMessage(chats=SOURCE_CHAT))
async def handler(event):
    await check_and_forward(event.message)

# ===== –ê–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ =====
async def auto_restart():
    while True:
        await asyncio.sleep(RESTART_INTERVAL)
        send_to_bot("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç!")
        await user_client.disconnect()
        os.execv(sys.executable, ['python'] + sys.argv)

# ===== –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ =====
async def main():
    await user_client.start(phone=PHONE_NUMBER)
    send_to_bot("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

    asyncio.create_task(auto_restart())

    messages = await user_client.get_messages(SOURCE_CHAT, limit=10)
    for msg in messages:
        await check_and_forward(msg)

    await user_client.run_until_disconnected()

# ===== –ó–∞–ø—É—Å–∫ =====
if __name__ == "__main__":
    asyncio.run(main())
