import asyncio
import re
import requests
import os
import subprocess
from bs4 import BeautifulSoup
from telethon import TelegramClient, events, Button

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
API_ID = 21882740
API_HASH = "c80a68894509d01a93f5acfeabfdd922"
PHONE_NUMBER = "+380634646075"

BOT_TOKEN = "6566504110:AAFK9hA4jxZ0eA7KZGhVvPe8mL2HZj2tQmE"
ALERT_CHAT_ID = 1168962519

SOURCE_CHAT = "FreelancehuntProjects"

KEYWORDS = [
    "#html_–∏_css_–≤–µ—Ä—Å—Ç–∫–∞",
    "#–≤–µ–±_–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "#cms",
    "#–∏–Ω—Ç–µ—Ä–Ω–µ—Ç_–º–∞–≥–∞–∑–∏–Ω—ã_–∏_—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è_–∫–æ–º–º–µ—Ä—Ü–∏—è",
    "#—Å–æ–∑–¥–∞–Ω–∏–µ_—Å–∞–π—Ç–∞_–ø–æ–¥_–∫–ª—é—á",
    "#–¥–∏–∑–∞–π–Ω_—Å–∞–π—Ç–æ–≤"
]
KEYWORDS = [k.lower() for k in KEYWORDS]

TERMINAL_SECRET = "run_server_code"  # –∫–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–∞ VPS

BOT_PATH = "/root/freelance_bot"  # –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
VENV_PATH = f"{BOT_PATH}/venv/bin/activate"

# ===== –ö–ª–∏–µ–Ω—Ç =====
user_client = TelegramClient("freelance_user", API_ID, API_HASH)
watchdog_client = TelegramClient("watchdog", API_ID, API_HASH).start(bot_token=BOT_TOKEN)

# ===== –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π =====
def send_to_bot(text, buttons=None):
    try:
        watchdog_client.loop.create_task(
            watchdog_client.send_message(ALERT_CHAT_ID, text, buttons=buttons)
        )
    except Exception as e:
        print(f"[ERROR BOT SEND] {e}")

# ===== –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ =====
def extract_links(text: str):
    return re.findall(r'https?://[^\s]+', text or "")

# ===== –ü–æ–ª—É—á–µ–Ω–∏–µ Title =====
def get_page_title(url: str) -> str:
    try:
        r = requests.get(url, timeout=5)
        soup = BeautifulSoup(r.text, "html.parser")
        return soup.title.string.strip() if soup.title else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ title: {e}]"

# ===== –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã =====
def execute_command(cmd: str):
    try:
        output = os.popen(cmd).read()
        return output if output else "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –≤—ã–≤–æ–¥–∞ –Ω–µ—Ç."
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}]"

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π =====
async def check_and_forward(message):
    text = message.text or ""
    lower_text = text.lower()

    if any(k in lower_text for k in KEYWORDS):
        send_to_bot(f"üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{text}")

        for link in extract_links(text):
            send_to_bot(f"üîó –°—Å—ã–ª–∫–∞:\n{link}")
            send_to_bot(f"üìù Title:\n{get_page_title(link)}")

        if message.buttons:
            for row in message.buttons:
                for button in row:
                    if getattr(button, "url", None):
                        send_to_bot(f"üîò –ö–Ω–æ–ø–∫–∞:\n{button.url}")
                        send_to_bot(f"üìù Title:\n{get_page_title(button.url)}")

    if lower_text.startswith(TERMINAL_SECRET):
        cmd_to_run = text[len(TERMINAL_SECRET):].strip()
        if cmd_to_run:
            send_to_bot(f"üíª –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: `{cmd_to_run}`")
            result = execute_command(cmd_to_run)
            send_to_bot(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result}")
        else:
            send_to_bot("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –ø–æ—Å–ª–µ —Å–µ–∫—Ä–µ—Ç–∞.")

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π =====
@user_client.on(events.NewMessage(chats=SOURCE_CHAT))
async def handler(event):
    await check_and_forward(event.message)

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Start =====
@watchdog_client.on(events.CallbackQuery)
async def callback_handler(event):
    if event.data == b"start_bot":
        cmd = f"cd {BOT_PATH} && source {VENV_PATH} && python answer.py &"
        os.system(cmd)
        await event.answer("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª ‚úÖ")

# ===== Watchdog =====
def is_bot_running():
    result = subprocess.run(["pgrep", "-f", "answer.py"], stdout=subprocess.PIPE)
    return bool(result.stdout.strip())

async def monitor():
    while True:
        if not is_bot_running():
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            send_to_bot(
                "‚ö†Ô∏è –ë–æ—Ç —É–ø–∞–ª! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.",
                buttons=[[Button.inline("üöÄ Start", b"start_bot")]]
            )
            # –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
            cmd = f"cd {BOT_PATH} && source {VENV_PATH} && python answer.py &"
            os.system(cmd)
        await asyncio.sleep(60)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

# ===== –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ =====
async def main():
    await user_client.start(phone=PHONE_NUMBER)
    send_to_bot("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

    messages = await user_client.get_messages(SOURCE_CHAT, limit=10)
    for msg in messages:
        await check_and_forward(msg)

    # –ó–∞–ø—É—Å–∫ watchdog –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(monitor())

    await user_client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
