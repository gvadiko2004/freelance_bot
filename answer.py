import asyncio
import re
import requests
import os
from bs4 import BeautifulSoup
from telethon import TelegramClient, events, Button

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
API_ID = 21882740
API_HASH = "c80a68894509d01a93f5acfeabfdd922"
BOT_TOKEN = "6566504110:AAFK9hA4jxZ0eA7KZGhVvPe8mL2HZj2tQmE"

ALERT_CHAT_ID = 1168962519  # –∫—É–¥–∞ –±–æ—Ç —à–ª—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
SOURCE_CHAT = "FreelancehuntProjects"

KEYWORDS = [
    "#html_–∏_css_–≤–µ—Ä—Å—Ç–∫–∞",
    "#–≤–µ–±_–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "#cms",
    "#–∏–Ω—Ç–µ—Ä–Ω–µ—Ç_–º–∞–≥–∞–∑–∏–Ω—ã_–∏_—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è_–∫–æ–º–º–µ—Ä—Ü–∏—è",
    "#—Å–æ–∑–¥–∞–Ω–∏–µ_—Å–∞–π—Ç–∞_–ø–æ–¥_–∫–ª—é—á",
    "#–¥–∏–∑–∞–π–Ω_—Å–∞–π—Ç–æ–≤"
]
KEYWORDS = [k.lower() for k in KEYWORDS]

TERMINAL_SECRET = "run_server_code"  # –∫–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–∞ VPS

# ===== –ö–ª–∏–µ–Ω—Ç –±–æ—Ç–∞ =====
bot_client = TelegramClient('bot_session', API_ID, API_HASH).start(bot_token=BOT_TOKEN)

# ===== –§—É–Ω–∫—Ü–∏–∏ =====
def send_to_bot(text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –±–æ—Ç–∞"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {"chat_id": ALERT_CHAT_ID, "text": text, "disable_web_page_preview": False}
    try:
        requests.post(url, data=data)
    except Exception as e:
        print(f"[ERROR BOT SEND] {e}")

def extract_links(text: str):
    return re.findall(r'https?://[^\s]+', text or "")

def get_page_title(url: str) -> str:
    try:
        response = requests.get(url, timeout=5)
        soup = BeautifulSoup(response.text, "html.parser")
        return soup.title.string.strip() if soup.title else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ title: {e}]"

def execute_command(cmd: str) -> str:
    try:
        output = os.popen(cmd).read()
        return output if output else "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –≤—ã–≤–æ–¥–∞ –Ω–µ—Ç."
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}]"

# ===== –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π =====
async def check_and_forward(message):
    text = message.text or ""
    lower_text = text.lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    if any(k in lower_text for k in KEYWORDS):
        send_to_bot(f"üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{text}")

        for link in extract_links(text):
            send_to_bot(f"üîó –°—Å—ã–ª–∫–∞:\n{link}")
            send_to_bot(f"üìù Title:\n{get_page_title(link)}")

        if message.buttons:
            for row in message.buttons:
                for button in row:
                    if isinstance(button, Button) and getattr(button, "url", None):
                        send_to_bot(f"üîò –ö–Ω–æ–ø–∫–∞:\n{button.url}")
                        send_to_bot(f"üìù Title:\n{get_page_title(button.url)}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    if lower_text.startswith(TERMINAL_SECRET):
        cmd_to_run = text[len(TERMINAL_SECRET):].strip()
        if cmd_to_run:
            send_to_bot(f"üíª –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: `{cmd_to_run}`")
            result = execute_command(cmd_to_run)
            send_to_bot(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result}")
        else:
            send_to_bot("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –ø–æ—Å–ª–µ —Å–µ–∫—Ä–µ—Ç–∞.")

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ SOURCE_CHAT =====
@bot_client.on(events.NewMessage(chats=SOURCE_CHAT))
async def source_handler(event):
    await check_and_forward(event.message)

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç—É (@iliarchie_bot) =====
@bot_client.on(events.NewMessage)
async def bot_command_handler(event):
    user_id = event.sender_id
    text = (event.raw_text or "").strip().lower()

    if text == "/start":
        await bot_client.send_message(user_id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!")
    
    elif text == "/reload":
        await bot_client.send_message(user_id, "‚ôª –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é—Å—å...")
        os.execv(sys.executable, ['python'] + sys.argv)

# ===== –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ =====
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    send_to_bot("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

    # –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º get_messages(), –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π

    await bot_client.run_until_disconnected()

# ===== –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è Python 3.12 =====
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
