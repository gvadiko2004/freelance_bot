import asyncio
import re
import requests
from bs4 import BeautifulSoup
from telethon import TelegramClient, events, Button
from telethon.errors import SessionPasswordNeededError

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
api_id = 21882740
api_hash = "c80a68894509d01a93f5acfeabfdd922"
PHONE_NUMBER = "+380634646075"
PASSWORD_2FA = "gvadiko2004"

BOT_TOKEN = "6566504110:AAFK9hA4jxZ0eA7KZGhVvPe8mL2HZj2tQmE"
ALERT_CHAT_ID = 1168962519

SOURCE_CHAT = "FreelancehuntProjects"

KEYWORDS = [
    "#html_–∏_css_–≤–µ—Ä—Å—Ç–∫–∞",
    "#–≤–µ–±_–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "#cms",
    "#–∏–Ω—Ç–µ—Ä–Ω–µ—Ç_–º–∞–≥–∞–∑–∏–Ω—ã_–∏_—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è_–∫–æ–º–º–µ—Ä—Ü–∏—è",
    "#—Å–æ–∑–¥–∞–Ω–∏–µ_—Å–∞–π—Ç–∞_–ø–æ–¥_–∫–ª—é—á",
    "#–¥–∏–∑–∞–π–Ω_—Å–∞–π—Ç–æ–≤"
]
KEYWORDS = [k.lower() for k in KEYWORDS]

SESSION_FILE = "user_session.session"
RESTART_INTERVAL = 20 * 60  # 20 –º–∏–Ω—É—Ç

# ===== –ö–ª–∏–µ–Ω—Ç—ã =====
user_client = TelegramClient(SESSION_FILE, api_id, api_hash)
bot_client = TelegramClient("bot_session", api_id, api_hash).start(bot_token=BOT_TOKEN)

# ===== –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π =====
def send_to_bot(text):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {"chat_id": ALERT_CHAT_ID, "text": text, "disable_web_page_preview": False}
    try:
        requests.post(url, data=data)
    except Exception as e:
        print(f"[ERROR BOT SEND] {e}")

# ===== –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ =====
def extract_links(text):
    return re.findall(r'https?://[^\s]+', text or "")

# ===== Title —Å—Ç—Ä–∞–Ω–∏—Ü—ã =====
def get_page_title(url):
    try:
        response = requests.get(url, timeout=5)
        soup = BeautifulSoup(response.text, "html.parser")
        title = soup.title.string.strip() if soup.title else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
        return title
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ title: {e}]"

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞ =====
async def check_and_forward(message):
    text = message.text or ""
    lower_text = text.lower()

    if any(k in lower_text for k in KEYWORDS):
        send_to_bot(f"üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{text}")

        for link in extract_links(text):
            send_to_bot(f"üîó –°—Å—ã–ª–∫–∞:\n{link}")
            send_to_bot(f"üìù Title:\n{get_page_title(link)}")

        if message.buttons:
            for row in message.buttons:
                for button in row:
                    if isinstance(button, Button) and getattr(button, "url", None):
                        send_to_bot(f"üîò –ö–Ω–æ–ø–∫–∞:\n{button.url}")
                        send_to_bot(f"üìù Title:\n{get_page_title(button.url)}")

# ===== –ê–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ =====
async def auto_restart():
    while True:
        await asyncio.sleep(RESTART_INTERVAL)
        send_to_bot("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç!")
        await user_client.disconnect()
        import os, sys
        os.execv(sys.executable, ['python'] + sys.argv)

# ===== –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ =====
async def authorize():
    await user_client.connect()
    if await user_client.is_user_authorized():
        send_to_bot("‚úÖ –ö–ª–∏–µ–Ω—Ç —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
        asyncio.create_task(start_monitoring())
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞
    await user_client.send_code_request(PHONE_NUMBER)
    send_to_bot("üì© –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω Telegram. –ñ–¥—ë–º –∫–æ–¥...")

    # –ñ–¥—ë–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–¥ –æ—Ç Telegram
    code_event = asyncio.Event()
    code_value = {"code": None}

    @user_client.on(events.NewMessage(from_users="Telegram"))
    async def code_listener(event):
        text = event.message.message or ""
        match = re.search(r'–ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Telegram:\s*(\d+)', text)
        if match:
            code_value["code"] = match.group(1)
            code_event.set()
            await bot_client.send_message(ALERT_CHAT_ID, f"üîë –ö–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω: {code_value['code']}")

    await code_event.wait()
    try:
        await user_client.sign_in(PHONE_NUMBER, code_value["code"])
    except SessionPasswordNeededError:
        await user_client.sign_in(password=PASSWORD_2FA)
    send_to_bot("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")

    asyncio.create_task(start_monitoring())

# ===== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ =====
async def start_monitoring():
    @user_client.on(events.NewMessage(chats=SOURCE_CHAT))
    async def channel_handler(event):
        await check_and_forward(event.message)

    send_to_bot("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ –∑–∞–ø—É—â–µ–Ω!")
    await user_client.run_until_disconnected()

# ===== –ö–æ–º–∞–Ω–¥–∞ /start api =====
@bot_client.on(events.NewMessage(pattern="/start api"))
async def start_command(event):
    await event.respond("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
    asyncio.create_task(authorize())

# ===== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =====
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –∂–¥—ë–º /start api...")
    bot_client.run_until_disconnected()
